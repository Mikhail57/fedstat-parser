#------------------------------------------------------------------------------
# Copyright (c) 2013, Nucleic Development Team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file LICENSE, distributed with this software.
#------------------------------------------------------------------------------
""" An example of using Looper to generate widgets from an iterable.

<< autodoc-me >>
"""
from __future__ import print_function
import os
from pathlib import Path

from enaml.image import Image
from enaml.core.api import Looper, Conditional
from enaml.layout.api import vbox, hbox, align
from enaml.widgets.api import (
    Window, PopupView, Container, Label, Field, PushButton, ScrollArea, Slider, Html, ComboBox, ImageView, CheckBox, GroupBox, FileDialogEx
)


def image_path(name):
    dirname = os.path.dirname(__file__)
    return os.path.join(dirname, 'images', name)


LOADER_IMAGE = Image(data=Path(image_path('loader.gif')).read_bytes())


enamldef Loader(Container):
    Label:
        text = 'Загрузка…'


enamldef NotificationPopup(PopupView): popup:
    attr state
    foreground = 'white'
    background = 'rgba(30, 30, 30, 0.85)'
    parent_anchor = (0.5, 0.5)
    anchor = (0.5, 0.5)
    window_type='window'
    fade_in_duration = 500
    fade_out_duration = 500
    Container:
        Conditional:
            condition << state.is_saving
            Label:
                foreground = 'white'
                text = 'Сохранение…'
                align = 'center'
        Conditional:
            condition << state.is_succeed
            Container:
                constraints = [vbox(result, close)]
                Label: result:
                    foreground = 'white'
                    text = 'Сохранено'
                    align = 'center'
                PushButton: close:
                    text = 'Закрыть'
                    clicked :: popup.close()
        Conditional:
            condition << not state.is_succeed and not state.is_saving
            Container:
                constraints = [vbox(result, close)]
                Label: result:
                    foreground = 'white'
                    text = 'Ошибка сохранения'
                    align = 'center'
                PushButton: close:
                    text = 'Закрыть'
                    clicked :: popup.close()



enamldef Filter(GroupBox): self_filter:
    attr item
    attr is_checkbox_enabled = len(item.values) > 1
    attr filter_text = ''

    share_layout = True
    title = item.title

    Conditional:
        condition << len(self_filter.item.values) > 12
        Field:
            submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']
            text := filter_text

    Conditional:
        condition << len(self_filter.item.values) == 1
        CheckBox:
            attr item = self_filter.item.values[0]
            checked = item.checked
            text = item.title
            enabled = False
    Conditional:
        condition << len(self_filter.item.values) > 1
        ScrollArea:
            Container:
                Looper:
                    iterable << sorted(filter(lambda v: filter_text.lower() in v.title.lower() or v.checked, item.values), key=lambda v: not v.checked)
                    CheckBox:
                        checked := loop.item.checked
                        text << loop.item.title
                        enabled << self_filter.is_checkbox_enabled



enamldef Main(Window): main:
    attr ui_data
    attr selected_source = ui_data.selected_source
    title = 'Грабер статистических данных'
    Container:
        constraints = [
            vbox(
                hbox(label, field),
                #selected,
                status,
                scroller,
                save_container,
            ),
            align('v_center', label, field),
        ]
        Label: label:
            text = 'Источник данных'
        ComboBox: field:
            items << list(map(lambda s: s.title, ui_data.sources))
            index := ui_data.selected_source_idx
        Container: status:
            Conditional:
                condition << selected_source.is_loading
                Loader:
                    pass
            Conditional:
                condition << selected_source.is_error
                Label:
                    text << 'Ошибка: ' +  selected_source.error_msg
        ScrollArea: scroller:
            Container:
                # Note that a Looper expects to iterate over unique values.
                # Passing duplicate values can lead to crashes.
                Looper: looper:
                    iterable << selected_source.filters
                    Filter:
                        item=loop.item
        Container: save_container:
            Conditional:
                condition << not selected_source.is_loading and not selected_source.is_error 
                PushButton:
                    text = 'Сохранить'
                    clicked::
                        path = FileDialogEx.get_save_file_name(main)
                        selected_source.on_save_clicked(selected_source, path, main)
            Conditional:
                condition << selected_source.is_error
                PushButton:
                    text = 'Повторить'
                    clicked::
                        selected_source.on_reload_clicked(selected_source)

